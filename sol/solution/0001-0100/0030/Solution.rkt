(define (find-substring s words)
  (define word-len (string-length (first words)))
  (define word-count (for/hash ([w words]) (values w (count (λ (x) (equal? x w)) words))))
  (define res '())
  (for ([i (in-range word-len)])
    (define left i)
    (define count 0)
    (define seen (make-hash))
    (for ([j (in-range i (- (string-length s) word-len -1) word-len)])
      (define word (substring s j (+ j word-len)))
      (if (hash-has-key? word-count word)
          (begin
            (hash-update! seen word add1 0)
            (set! count (+ count 1))
            (let loop ()
              (when (> (hash-ref seen word) (hash-ref word-count word))
                (define left-word (substring s left (+ left word-len)))
                (hash-update! seen left-word (λ (x) (- x 1)))
                (set! left (+ left word-len))
                (set! count (- count 1))
                (loop)))
            (when (= count (length words))
              (set! res (append res (list left)))))
          (begin
            (set! seen (make-hash))
            (set! count 0)
            (set! left (+ j word-len))))))
  res)